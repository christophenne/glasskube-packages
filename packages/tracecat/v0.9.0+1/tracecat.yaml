apiVersion: v1
kind: ConfigMap
metadata:
  name: tracecat-config
data:
  LOG_LEVEL: "INFO"
  TRACECAT__APP_ENV: "production" # not yet configurable, not sure if that would make sense?
  TRACECAT__AUTH_TYPES: "basic,google_oauth" # not yet configurable
  TRACECAT__DB_SSLMODE: "require" # not sure?
  TRACECAT__API_ROOT_PATH: "/api"
  KEYS_SECRET_NAME: "" # patched by transformations
  KEYS_SECRET_NAMESPACE: "" # patched by transformations
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tracecat-key-generator-role
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    resourceNames:
      - tracecat-keys
    verbs:
      - patch
      - get
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tracecat-key-generator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tracecat-key-generator-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tracecat-key-generator-role
subjects:
  - kind: ServiceAccount
    name: tracecat-key-generator
---
apiVersion: v1
kind: Secret
type: generic
metadata:
  name: tracecat-keys
---
kind: Cluster
apiVersion: postgresql.cnpg.io/v1
metadata:
  name: tracecat-db
spec:
  enableSuperuserAccess: false
  instances: 1
  bootstrap:
    initdb:
      database: tracecat
      owner: tracecat
  storage:
    size: 2Gi
  monitoring:
    enablePodMonitor: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tracecat-api
  labels:
    app.kubernetes.io/name: tracecat-api
spec:
  selector:
    matchLabels:
      app: tracecat-api
  template:
    metadata:
      labels:
        app: tracecat-api
    spec:
      serviceAccountName: tracecat-key-generator # TODO service account only for init container maybe?
      volumes:
        - name: init-dir
          emptyDir: {}
      initContainers:
        - name: generate-db-encryption-key
          image: python:3.12-slim-bookworm
          command: ['bash', '-c', '
            pip install cryptography >/dev/null 2>&1;
            python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())" > /init-dir/db-encryption-key
          ']
          volumeMounts:
            - mountPath: /init-dir
              name: init-dir
        - name: set-keys-if-not-present
          image: bitnami/kubectl:latest
          volumeMounts:
            - mountPath: /init-dir
              name: init-dir
          command: ['bash', '-c', '
                    serviceKey=`kubectl get secret -n $KEYS_SECRET_NAMESPACE $KEYS_SECRET_NAME -o jsonpath="{.data.SERVICE_KEY}"`;
                    if [[ 0 == $? ]] && [[ $serviceKey == "" ]]; then
                      serviceKey=`openssl rand -hex 32 | base64 -w 0`;
                      kubectl patch secret -n $KEYS_SECRET_NAMESPACE $KEYS_SECRET_NAME -p "{\"data\": {\"SERVICE_KEY\": \"$serviceKey\"}}";
                    fi;
                    signingSecret=`kubectl get secret -n $KEYS_SECRET_NAMESPACE $KEYS_SECRET_NAME -o jsonpath="{.data.SIGNING_SECRET}"`;
                    if [[ 0 == $? ]] && [[ $signingSecret == "" ]]; then
                      signingSecret=`openssl rand -hex 32 | base64 -w 0`;
                      kubectl patch secret -n $KEYS_SECRET_NAMESPACE $KEYS_SECRET_NAME -p "{\"data\": {\"SIGNING_SECRET\": \"$signingSecret\"}}";
                    fi;
                    dbEncryptionKey=`kubectl get secret -n $KEYS_SECRET_NAMESPACE $KEYS_SECRET_NAME -o jsonpath="{.data.DB_ENCRYPTION_KEY}"`;
                    if [[ 0 == $? ]] && [[ $dbEncryptionKey == "" ]]; then
                      dbEncryptionKey=`cat /init-dir/db-encryption-key | base64 -w 0`;
                      kubectl patch secret -n $KEYS_SECRET_NAMESPACE $KEYS_SECRET_NAME -p "{\"data\": {\"DB_ENCRYPTION_KEY\": \"$dbEncryptionKey\"}}";
                    fi;']
          env:
            - name: KEYS_SECRET_NAMESPACE
              valueFrom:
                configMapKeyRef:
                  key: KEYS_SECRET_NAMESPACE
                  name: tracecat-config
            - name: KEYS_SECRET_NAME
              valueFrom:
                configMapKeyRef:
                  key: KEYS_SECRET_NAME
                  name: tracecat-config
      containers:
        - name: tracecat-api
          image: "ghcr.io/tracecathq/tracecat:0.9.0"
          ports:
            - containerPort: 8000
          envFrom:
            - secretRef:
                name: tracecat-db-app
            - configMapRef:
                name: tracecat-config
          env:
            - name: TRACECAT__DB_URI
              value: "postgresql+psycopg://$(username):$(password)@$(host):$(port)/$(dbname)"
            - name: RUN_MIGRATIONS
              value: "true"
            - name: TRACECAT__PUBLIC_RUNNER_URL
              valueFrom:
                configMapKeyRef:
                  name: tracecat-config
                  key: PUBLIC_API_URL
            - name: TRACECAT__ALLOW_ORIGINS
              valueFrom:
                configMapKeyRef:
                  name: tracecat-config
                  key: PUBLIC_APP_URL
            - name: TRACECAT__PUBLIC_APP_URL
              valueFrom:
                configMapKeyRef:
                  name: tracecat-config
                  key: PUBLIC_APP_URL
            - name: TRACECAT__PUBLIC_API_URL
              valueFrom:
                configMapKeyRef:
                  name: tracecat-config
                  key: PUBLIC_API_URL
            - name: TRACECAT__SERVICE_KEY
              valueFrom:
                secretKeyRef:
                  key: SERVICE_KEY # patched by the init container if not exists
                  name: tracecat-keys
            - name: TRACECAT__SIGNING_SECRET
              valueFrom:
                secretKeyRef:
                  key: SIGNING_SECRET # patched by the init container if not exists
                  name: tracecat-keys
            - name: TRACECAT__DB_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  key: DB_ENCRYPTION_KEY # patched by the init container if not exists
                  name: tracecat-keys
---
kind: Service
apiVersion: v1
metadata:
  name: tracecat-api
spec:
  ports:
    - port: 8000
      name: tracecat-api
  selector:
    app: tracecat-api
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tracecat-ingress
spec:
  rules:
    - host: ""
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: tracecat-api
                port:
                  number: 8000
          - path: /
            pathType: Prefix
            backend:
              service:
                name: tracecat-ui
                port:
                  number: 3000
# TODO TLS?
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tracecat-ui
  labels:
    app.kubernetes.io/name: tracecat-ui
spec:
  selector:
    matchLabels:
      app: tracecat-ui
  template:
    metadata:
      labels:
        app: tracecat-ui
    spec:
      containers:
        - name: tracecat-ui
          image: "ghcr.io/tracecathq/tracecat-ui:0.9.0"
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: tracecat-config
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: tracecat-config
                  key: TRACECAT__APP_ENV
            # Important: environment variables prefixed with `NEXT_PUBLIC_` are exposed to the browser client
            - name: NEXT_PUBLIC_APP_URL
              valueFrom:
                configMapKeyRef:
                  name: tracecat-config
                  key: PUBLIC_APP_URL
            - name: NEXT_PUBLIC_API_URL
              valueFrom:
                configMapKeyRef:
                  name: tracecat-config
                  key: PUBLIC_API_URL
            - name: NEXT_PUBLIC_APP_ENV
              valueFrom:
                configMapKeyRef:
                  name: tracecat-config
                  key: TRACECAT__APP_ENV
---
kind: Service
apiVersion: v1
metadata:
  name: tracecat-ui
spec:
  ports:
    - port: 3000
      name: tracecat-ui
  selector:
    app: tracecat-ui
---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: tracecat-worker
#  labels:
#    app.kubernetes.io/name: tracecat-worker
#spec:
#  selector:
#    matchLabels:
#      app: tracecat-worker
#  template:
#    metadata:
#      labels:
#        app: tracecat-worker
#    spec:
#      containers:
#        - name: tracecat-worker
#          image: "ghcr.io/tracecathq/tracecat:0.9.0"
#          command: ["python", "tracecat/dsl/worker.py"]
#          envFrom:
#            - secretRef:
#                name: tracecat-db-app
#            - configMapRef:
#                name: tracecat-config
#          env:
#            - name: TRACECAT__DB_URI
#              value: "postgresql+psycopg://$(username):$(password)@$(host):$(port)/$(dbname)"
